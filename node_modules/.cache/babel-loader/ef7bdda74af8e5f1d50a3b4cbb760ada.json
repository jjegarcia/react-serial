{"ast":null,"code":"var _jsxFileName = \"/Users/jgarc609/github/changing-complex-state-completed-forked/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\n/* eslint-disable node/no-missing-require */\n\n/**\n * This is a small example app to turn off and on\n * the built-in LED of an arduino by data sent\n * from the browser with socket.io.\n */\n// Initialize application constants\n\nvar bodyParser = require(\"body-parser\");\n\nvar app = require('express')();\n\nvar http = require('http').Server(app);\n\nvar io = require('socket.io')(http);\n\nvar tcpPort = process.env.PORT || 3000;\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\n\nvar SerialPort = require('serialport');\n\nvar port = new SerialPort('/dev/tty.usbmodem02691', {\n  baudRate: 9600\n});\nvar byteParser = new SerialPort.parsers.ByteLength({\n  length: 1\n});\nport.pipe(byteParser); // Values to send over to Arduino.\n\nvar HIGH = Buffer.from([1]); //HIGH=[1]\n\nvar LOW = Buffer.from([0]); //LOW=[0]\n\n/* ===========================================\n*\n* Setup a simple server.\n*\n=========================================== */\n\napp.get('/', function (req, res) {\n  res.sendfile('index.html');\n});\napp.post('/po', function (req, res) {\n  console.log('--->po: ${req.body.cha}');\n  res.send(req.body.cha);\n});\nhttp.listen(tcpPort, function () {\n  console.log(\"listening on http://localhost:\".concat(tcpPort));\n});\n/* ===========================================\n*\n*  Socket.io stuff\n*\n=========================================== */\n// io.on('connection', socket => {\n//   console.log('a user connected')\n//\n//   /**\n//    * Socket listener to determine whether or not to send HIGH / LOW\n//    * values to Arduino.\n//    */\n//   socket.on('message', msg => {\n//     console.log('Message received: ', msg)\n//     switch (msg) {\n//       case 'on':\n//         port.write(HIGH)\n//         break\n//       case 'off':\n//         port.write(LOW)\n//         break\n//       default:\n//         break\n//     }\n//   })\n// })\n\n/* ===========================================\n*\n* Serialport stuff\n*\n=========================================== */\n\nport.on('open', function () {\n  console.log('Port is open!');\n});\n/**\n * listen to the bytes as they are parsed from the parser.\n */\n\nbyteParser.on('data', function (data) {\n  var message; // if (HIGH.compare(data) === 0) {\n  //   message = 'LED successfully turned on.'\n  // } else if (LOW.compare(data) === 0) {\n  //   message = 'LED successfully turned off.'\n  // } else {\n  //   message = 'LED did not behave as expected.'\n  // }\n\n  message = data;\n  io.sockets.emit('new message', message);\n});\nport.on('close', function () {\n  console.log('Serial port disconnected.');\n  io.sockets.emit('close');\n});","map":{"version":3,"sources":["/Users/jgarc609/github/changing-complex-state-completed-forked/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById","bodyParser","require","app","http","Server","io","tcpPort","process","env","PORT","use","urlencoded","extended","SerialPort","port","baudRate","byteParser","parsers","ByteLength","length","pipe","HIGH","Buffer","from","LOW","get","req","res","sendfile","post","console","log","send","body","cha","listen","on","data","message","sockets","emit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n\n/* eslint-disable node/no-missing-require */\n\n/**\n * This is a small example app to turn off and on\n * the built-in LED of an arduino by data sent\n * from the browser with socket.io.\n */\n\n// Initialize application constants\nconst bodyParser = require(\"body-parser\")\nconst app = require('express')()\nconst http = require('http').Server(app)\nconst io = require('socket.io')(http)\nconst tcpPort = process.env.PORT || 3000\napp.use(bodyParser.urlencoded({extended: true}));\nconst SerialPort = require('serialport')\n\nconst port = new SerialPort('/dev/tty.usbmodem02691', {\n    baudRate: 9600,\n})\n\nconst byteParser = new SerialPort.parsers.ByteLength({length: 1})\nport.pipe(byteParser)\n\n// Values to send over to Arduino.\nconst HIGH = Buffer.from([1]) //HIGH=[1]\nconst LOW = Buffer.from([0]) //LOW=[0]\n\n/* ===========================================\n*\n* Setup a simple server.\n*\n=========================================== */\n\napp.get('/', (req, res) => {\n    res.sendfile('index.html')\n})\n\napp.post('/po', (req, res) => {\n    console.log('--->po: ${req.body.cha}')\n    res.send(req.body.cha)\n})\n\nhttp.listen(tcpPort, () => {\n    console.log(`listening on http://localhost:${tcpPort}`)\n})\n\n/* ===========================================\n*\n*  Socket.io stuff\n*\n=========================================== */\n\n// io.on('connection', socket => {\n//   console.log('a user connected')\n//\n//   /**\n//    * Socket listener to determine whether or not to send HIGH / LOW\n//    * values to Arduino.\n//    */\n//   socket.on('message', msg => {\n//     console.log('Message received: ', msg)\n//     switch (msg) {\n//       case 'on':\n//         port.write(HIGH)\n//         break\n//       case 'off':\n//         port.write(LOW)\n//         break\n//       default:\n//         break\n//     }\n//   })\n// })\n\n/* ===========================================\n*\n* Serialport stuff\n*\n=========================================== */\n\nport.on('open', () => {\n    console.log('Port is open!')\n})\n\n/**\n * listen to the bytes as they are parsed from the parser.\n */\nbyteParser.on('data', data => {\n    let message\n\n    // if (HIGH.compare(data) === 0) {\n    //   message = 'LED successfully turned on.'\n    // } else if (LOW.compare(data) === 0) {\n    //   message = 'LED successfully turned off.'\n    // } else {\n    //   message = 'LED did not behave as expected.'\n    // }\n    message = data;\n\n    io.sockets.emit('new message', message)\n})\n\nport.on('close', () => {\n    console.log('Serial port disconnected.')\n    io.sockets.emit('close')\n})\n"]},"metadata":{},"sourceType":"module"}