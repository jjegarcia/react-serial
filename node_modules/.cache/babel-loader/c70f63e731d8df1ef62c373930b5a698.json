{"ast":null,"code":"var _classCallCheck = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transform = require('stream').Transform;\n/**\n * Emit data every number of bytes\n * @extends Transform\n * @param {Object} options parser options object\n * @param {Number} options.length the number of bytes on each data event\n * @summary A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.\n * @example\nconst SerialPort = require('serialport')\nconst ByteLength = require('@serialport/parser-byte-length')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new ByteLength({length: 8}))\nparser.on('data', console.log) // will have 8 bytes per data event\n */\n\n\nvar ByteLengthParser = /*#__PURE__*/function (_Transform) {\n  \"use strict\";\n\n  _inherits(ByteLengthParser, _Transform);\n\n  var _super = _createSuper(ByteLengthParser);\n\n  function ByteLengthParser() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ByteLengthParser);\n\n    _this = _super.call(this, options);\n\n    if (typeof options.length !== 'number') {\n      throw new TypeError('\"length\" is not a number');\n    }\n\n    if (options.length < 1) {\n      throw new TypeError('\"length\" is not greater than 0');\n    }\n\n    _this.length = options.length;\n    _this.position = 0;\n    _this.buffer = Buffer.alloc(_this.length);\n    return _this;\n  }\n\n  _createClass(ByteLengthParser, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, cb) {\n      var cursor = 0;\n\n      while (cursor < chunk.length) {\n        this.buffer[this.position] = chunk[cursor];\n        cursor++;\n        this.position++;\n\n        if (this.position === this.length) {\n          this.push(this.buffer);\n          this.buffer = Buffer.alloc(this.length);\n          this.position = 0;\n        }\n      }\n\n      cb();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(cb) {\n      this.push(this.buffer.slice(0, this.position));\n      this.buffer = Buffer.alloc(this.length);\n      cb();\n    }\n  }]);\n\n  return ByteLengthParser;\n}(Transform);\n\nmodule.exports = ByteLengthParser;","map":null,"metadata":{},"sourceType":"script"}