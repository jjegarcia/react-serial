{"ast":null,"code":"var _classCallCheck = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transform = require('stream').Transform;\n/**\n * Parse the CCTalk protocol\n * @extends Transform\n * @summary A transform stream that emits CCTalk packets as they are received.\n * @example\nconst SerialPort = require('serialport')\nconst CCTalk = require('@serialport/parser-cctalk')\nconst port = new SerialPort('/dev/ttyUSB0')\nconst parser = port.pipe(new CCtalk())\nparser.on('data', console.log)\n */\n\n\nvar CCTalkParser = /*#__PURE__*/function (_Transform) {\n  \"use strict\";\n\n  _inherits(CCTalkParser, _Transform);\n\n  var _super = _createSuper(CCTalkParser);\n\n  function CCTalkParser() {\n    var _this;\n\n    _classCallCheck(this, CCTalkParser);\n\n    _this = _super.call(this);\n    _this.array = [];\n    _this.cursor = 0;\n    return _this;\n  }\n\n  _createClass(CCTalkParser, [{\n    key: \"_transform\",\n    value: function _transform(buffer, _, cb) {\n      var _this2 = this;\n\n      this.cursor += buffer.length; // TODO: Better Faster es7 no supported by node 4\n      // ES7 allows directly push [...buffer]\n      // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?\n\n      Array.from(buffer).map(function (byte) {\n        return _this2.array.push(byte);\n      });\n\n      while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {\n        // full frame accumulated\n        // copy command from the array\n        var FullMsgLength = this.array[1] + 5;\n        var frame = Buffer.from(this.array.slice(0, FullMsgLength)); // Preserve Extra Data\n\n        this.array = this.array.slice(frame.length, this.array.length);\n        this.cursor -= FullMsgLength;\n        this.push(frame);\n      }\n\n      cb();\n    }\n  }]);\n\n  return CCTalkParser;\n}(Transform);\n\nmodule.exports = CCTalkParser;","map":null,"metadata":{},"sourceType":"script"}