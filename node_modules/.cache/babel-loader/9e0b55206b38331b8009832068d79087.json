{"ast":null,"code":"var _jsxFileName = \"/Users/jgarc609/github/changing-complex-state-completed-forked/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\")); ///* eslint-disable node/no-missing-require */\n\n/**\n * This is a small example app to turn off and on\n * the built-in LED of an arduino by data sent\n * from the browser with socket.io.\n */\n// Initialize application constants\n\nvar bodyParser = require(\"body-parser\"); //const app = require('express')()\n//const http = require('http').Server(app)\n//const io = require('socket.io')(http)\n//const tcpPort = process.env.PORT || 3000\n//app.use(bodyParser.urlencoded({extended: true}));\n\n\nvar SerialPort = require('serialport');\n\nvar port = new SerialPort('/dev/tty.usbmodem02691', {\n  baudRate: 9600\n});\nvar byteParser = new SerialPort.parsers.ByteLength({\n  length: 1\n});\nport.pipe(byteParser);\n/* ===========================================\n*\n* Setup a simple server.\n*\n=========================================== */\n//app.get('/', (req, res) => {\n//    res.sendfile('index.html')\n//})\n//\n//app.post('/po', (req, res) => {\n//    console.log('--->po: ${req.body.cha}')\n//    res.send(req.body.cha)\n//})\n//\n//http.listen(tcpPort, () => {\n//    console.log(`listening on http://localhost:${tcpPort}`)\n//})\n\n/* ===========================================\n*\n*  Socket.io stuff\n*\n=========================================== */\n\n/* ===========================================\n*\n* Serialport stuff\n*\n=========================================== */\n\nport.on('open', function () {\n  console.log('Port is open!');\n});\n/**\n * listen to the bytes as they are parsed from the parser.\n */\n//byteParser.on('data', data => {\n//    let message\n//    message = data;\n//\n//    io.sockets.emit('new message', message)\n//})\n\nport.on('close', function () {\n  console.log('Serial port disconnected.'); //    io.sockets.emit('close')\n});","map":{"version":3,"sources":["/Users/jgarc609/github/changing-complex-state-completed-forked/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById","bodyParser","require","SerialPort","port","baudRate","byteParser","parsers","ByteLength","length","pipe","on","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEAD,QAAQ,CAACE,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAIA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B,C,CACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAME,IAAI,GAAG,IAAID,UAAJ,CAAe,wBAAf,EAAyC;AAClDE,EAAAA,QAAQ,EAAE;AADwC,CAAzC,CAAb;AAIA,IAAMC,UAAU,GAAG,IAAIH,UAAU,CAACI,OAAX,CAAmBC,UAAvB,CAAkC;AAACC,EAAAA,MAAM,EAAE;AAAT,CAAlC,CAAnB;AACAL,IAAI,CAACM,IAAL,CAAUJ,UAAV;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEAF,IAAI,CAACO,EAAL,CAAQ,MAAR,EAAgB,YAAM;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,IAAI,CAACO,EAAL,CAAQ,OAAR,EAAiB,YAAM;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EADmB,CAEvB;AACC,CAHD","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n\n///* eslint-disable node/no-missing-require */\n\n/**\n * This is a small example app to turn off and on\n * the built-in LED of an arduino by data sent\n * from the browser with socket.io.\n */\n\n// Initialize application constants\nconst bodyParser = require(\"body-parser\")\n//const app = require('express')()\n//const http = require('http').Server(app)\n//const io = require('socket.io')(http)\n//const tcpPort = process.env.PORT || 3000\n//app.use(bodyParser.urlencoded({extended: true}));\nconst SerialPort = require('serialport')\n\nconst port = new SerialPort('/dev/tty.usbmodem02691', {\n    baudRate: 9600,\n})\n\nconst byteParser = new SerialPort.parsers.ByteLength({length: 1})\nport.pipe(byteParser)\n\n/* ===========================================\n*\n* Setup a simple server.\n*\n=========================================== */\n\n//app.get('/', (req, res) => {\n//    res.sendfile('index.html')\n//})\n//\n//app.post('/po', (req, res) => {\n//    console.log('--->po: ${req.body.cha}')\n//    res.send(req.body.cha)\n//})\n//\n//http.listen(tcpPort, () => {\n//    console.log(`listening on http://localhost:${tcpPort}`)\n//})\n\n/* ===========================================\n*\n*  Socket.io stuff\n*\n=========================================== */\n\n\n/* ===========================================\n*\n* Serialport stuff\n*\n=========================================== */\n\nport.on('open', () => {\n    console.log('Port is open!')\n})\n\n/**\n * listen to the bytes as they are parsed from the parser.\n */\n//byteParser.on('data', data => {\n//    let message\n//    message = data;\n//\n//    io.sockets.emit('new message', message)\n//})\n\nport.on('close', () => {\n    console.log('Serial port disconnected.')\n//    io.sockets.emit('close')\n})\n"]},"metadata":{},"sourceType":"module"}