{"ast":null,"code":"var _classCallCheck = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transform = require('stream').Transform;\n/**\n * A transform stream that emits data each time a byte sequence is received.\n * @extends Transform\n * @summary To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.\n * @example\nconst SerialPort = require('serialport')\nconst Delimiter = require('@serialport/parser-delimiter')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Delimiter({ delimiter: '\\n' }))\nparser.on('data', console.log)\n */\n\n\nvar DelimiterParser = /*#__PURE__*/function (_Transform) {\n  \"use strict\";\n\n  _inherits(DelimiterParser, _Transform);\n\n  var _super = _createSuper(DelimiterParser);\n\n  function DelimiterParser() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, DelimiterParser);\n\n    _this = _super.call(this, options);\n\n    if (options.delimiter === undefined) {\n      throw new TypeError('\"delimiter\" is not a bufferable object');\n    }\n\n    if (options.delimiter.length === 0) {\n      throw new TypeError('\"delimiter\" has a 0 or undefined length');\n    }\n\n    _this.includeDelimiter = options.includeDelimiter !== undefined ? options.includeDelimiter : false;\n    _this.delimiter = Buffer.from(options.delimiter);\n    _this.buffer = Buffer.alloc(0);\n    return _this;\n  }\n\n  _createClass(DelimiterParser, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, cb) {\n      var data = Buffer.concat([this.buffer, chunk]);\n      var position;\n\n      while ((position = data.indexOf(this.delimiter)) !== -1) {\n        this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));\n        data = data.slice(position + this.delimiter.length);\n      }\n\n      this.buffer = data;\n      cb();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(cb) {\n      this.push(this.buffer);\n      this.buffer = Buffer.alloc(0);\n      cb();\n    }\n  }]);\n\n  return DelimiterParser;\n}(Transform);\n\nmodule.exports = DelimiterParser;","map":null,"metadata":{},"sourceType":"script"}