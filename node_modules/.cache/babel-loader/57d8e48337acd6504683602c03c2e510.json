{"ast":null,"code":"var _classCallCheck = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/jgarc609/github/changing-complex-state-completed-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transform = require('stream').Transform;\n/**\n * A transform stream that uses a regular expression to split the incoming text upon.\n *\n * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends Transform\n * @example\nconst SerialPort = require('serialport')\nconst Regex = require('@serialport/parser-regex')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Regex({ regex: /[\\r\\n]+/ }))\nparser.on('data', console.log)\n */\n\n\nvar RegexParser = /*#__PURE__*/function (_Transform) {\n  \"use strict\";\n\n  _inherits(RegexParser, _Transform);\n\n  var _super = _createSuper(RegexParser);\n\n  function RegexParser(options) {\n    var _this;\n\n    _classCallCheck(this, RegexParser);\n\n    var opts = Object.assign({\n      encoding: 'utf8'\n    }, options);\n\n    if (opts.regex === undefined) {\n      throw new TypeError('\"options.regex\" must be a regular expression pattern or object');\n    }\n\n    if (!(opts.regex instanceof RegExp)) {\n      opts.regex = new RegExp(opts.regex);\n    }\n\n    _this = _super.call(this, opts);\n    _this.regex = opts.regex;\n    _this.data = '';\n    return _this;\n  }\n\n  _createClass(RegexParser, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, cb) {\n      var _this2 = this;\n\n      var data = this.data + chunk;\n      var parts = data.split(this.regex);\n      this.data = parts.pop();\n      parts.forEach(function (part) {\n        _this2.push(part);\n      });\n      cb();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(cb) {\n      this.push(this.data);\n      this.data = '';\n      cb();\n    }\n  }]);\n\n  return RegexParser;\n}(Transform);\n\nmodule.exports = RegexParser;","map":null,"metadata":{},"sourceType":"script"}