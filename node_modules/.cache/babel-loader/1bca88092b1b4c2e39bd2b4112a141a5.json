{"ast":null,"code":"var fs = require('fs');\n\nvar debug = require('debug');\n\nvar logger = debug('serialport/bindings/unixRead');\n\nmodule.exports = function unixRead(buffer, offset, length) {\n  var _this = this;\n\n  logger('Starting read');\n\n  if (!this.isOpen) {\n    return Promise.reject(new Error('Port is not open'));\n  }\n\n  return new Promise(function (resolve, reject) {\n    fs.read(_this.fd, buffer, offset, length, null, function (err, bytesRead) {\n      if (err && (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR')) {\n        if (!_this.isOpen) {\n          return reject(new Error('Port is not open'));\n        }\n\n        logger('waiting for readable because of code:', err.code);\n\n        _this.poller.once('readable', function (err) {\n          if (err) {\n            return reject(err);\n          }\n\n          resolve(_this.read(buffer, offset, length));\n        });\n\n        return;\n      }\n\n      var disconnectError = err && (err.code === 'EBADF' || // Bad file number means we got closed\n      err.code === 'ENXIO' || // No such device or address probably usb disconnect\n      err.code === 'UNKNOWN' || err.errno === -1); // generic error\n\n      if (disconnectError) {\n        err.disconnect = true;\n        logger('disconnecting', err);\n      }\n\n      if (err) {\n        return reject(err);\n      }\n\n      if (bytesRead === 0) {\n        resolve(_this.read(buffer, offset, length));\n        return;\n      }\n\n      logger('Finished read', bytesRead, 'bytes');\n      resolve(bytesRead);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}